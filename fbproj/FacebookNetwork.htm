<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="Scripts/jquery-2.0.3.js" type="text/javascript"></script>
    <script src="Scripts/knockout-2.3.0.js" type="text/javascript"></script>
    <script src="Scripts/three.min.js" type="text/javascript"></script>
    <script src="ViewModel/MainVM.js" type="text/javascript"></script>

    <script type="text/javascript">
              

        var scene, camera, render, projector, raycaster;
        var directionVector = new THREE.Vector3();
        var cameraZ = 0;

        var mouse = new THREE.Vector2(), INTERSECTED, objArray = new Array();
        var radius = 100, theta = 0;

        var flag = 0;
        var posX, posY;

//        var WIDTH = window.innerWidth, HEIGHT = window.innerHeight;

        var WIDTH = 500, HEIGHT = 400;
        var VIEW_ANGLE = 45,
  ASPECT = WIDTH / HEIGHT,
  NEAR = 0.1,
  FAR = 10000;

        var clickInfo = {
            x: 0,
            y: 0,
            userHasClicked: false
        };

        var cube_len = 50;

        $(document).ready(function () {
            init();
            animate();

            
        });

        var psi = Math.PI / 180;
        function animate() {
            requestAnimationFrame(animate);
            //            camera.position.x += Math.cos(psi*5);
            //            camera.position.y -= Math.sin(psi);
            //            camera.lookAt(scene.position);
            render();
        };

        function render() {
            camera.lookAt(scene.position);
            var plane;

            var x = (clickInfo.x / WIDTH) * 2 - 1;
            var y = -(clickInfo.y / HEIGHT) * 2 + 1;

            directionVector.set(x, y, 1);

            projector.unprojectVector(directionVector, camera);
            directionVector.normalize();

            raycaster.set(camera.position, directionVector);
            var target;
            var intersects = raycaster.intersectObjects(scene.children);
            if (intersects.length > 0) {
                target = intersects[0].object;

                var canvas1 = document.createElement('canvas');
                var context1 = canvas1.getContext('2d');
                context1.font = "Bold 40px Arial";
                context1.fillStyle = "rgba(0,0,0,0.99)";
                context1.fillText(intersects[0].object.name, 0, 50);

                var texture1 = new THREE.Texture(canvas1)
                texture1.needsUpdate = true;

                var material1 = new THREE.MeshBasicMaterial({ map: texture1, side: THREE.DoubleSide });
                material1.transparent = true;

                var geometry = new THREE.PlaneGeometry(50, 50);


                plane = new THREE.Mesh(geometry, material1);
                plane.position.x = intersects[0].object.position.x - 10;
                plane.position.y = intersects[0].object.position.y + 10;
                plane.position.z = intersects[0].object.position.z + 40;
                plane.rotation.x = camera.rotation.x;
                plane.rotation.y = camera.rotation.y;
                plane.rotation.z = camera.rotation.z;

                scene.add(plane);

                setTimeout(function () {
                    scene.remove(plane);
                }, 10);

            }

            renderer.render(scene, camera);


        };
        var angle1, angle2;
        function onMouseDown(event) {
            flag = 1;

            posX = event.clientX;
            posY = event.clientY;
        };

        function onMouseMove(event) {
            if (flag == 1) {
                //console.log(event.clientX, event.clientY);
                var currX = event.clientX, currY = event.clientY;

                if (posX > currX) {
                    camera.position.x += (posX - currX);
                    renderer.render(scene, camera);
                }
                else {
                    camera.position.x -= (currX - posX);
                    renderer.render(scene, camera);
                }
                if (posY > currY) {
                    camera.position.y -= (posY - currY);
                    renderer.render(scene, camera);
                }
                else {
                    camera.position.y += (currY - posY);
                    renderer.render(scene, camera);
                }

                camera.updateMatrix();
            }
        };

        function onMouseUp(event) {
            flag = 0;
        };

        function onMouseWheel(event) {
            event.preventDefault();

            camera.fov -= event.wheelDeltaY * 0.05;

            camera.updateProjectionMatrix();
            //            renderer.render(scene, camera);
        };

        function init() {

            container = document.getElementById("container");
            var idk = document.createElement("div");
            container.appendChild(idk);

            //            container = document.createElement('div');
            //            document.body.appendChild(container);
            //            $("div").className = "container";

            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
            camera.position.y = 0;
            camera.position.z = 600;
            camera.position.x = 0;

            projector = new THREE.Projector();
            raycaster = new THREE.Raycaster();

            renderer = new THREE.CanvasRenderer();
            renderer.setSize(WIDTH, HEIGHT);

            container.addEventListener("mousedown", function (event) { onMouseDown(event); }, false);
            container.addEventListener("mousemove", function (event) { onMouseMove(event); }, false);
            container.addEventListener("mouseup", function (event) { onMouseUp(event); }, false);
            container.addEventListener("mousewheel", function (event) { onMouseWheel(event); }, false);

            container.addEventListener("click", function (event) {
                clickInfo.userHasClicked = true;
                clickInfo.x = event.clientX;
                clickInfo.y = event.clientY;
                console.log("mouse over");
            }, false);

            var n = 5;

            function drawCube(outX, outY, outZ, imgSrc, name) {
                var cube = new THREE.Mesh(new THREE.CubeGeometry(cube_len, cube_len, cube_len), new THREE.MeshBasicMaterial({ map: THREE.ImageUtils.loadTexture(imgSrc), overdraw: true }));
                cube.overdraw = true;
                cube.position.x = outX;
                cube.position.y = outY;
                cube.position.z = outZ;


                cube.position.needsUpdate = true;
                cube.dynamic = true;
                cube.name = name;

                objArray.push(cube);
                scene.add(cube);
            };

            function plane() {

                var geometry = new THREE.PlaneGeometry(10, 100);
                geometry.applyMatrix(new THREE.Matrix4().makeRotationX(-Math.PI / 2));

                var material = new THREE.MeshBasicMaterial({ color: 0xe0e0e0, overdraw: 0.5 });

                plane = new THREE.Mesh(geometry, material);
                plane.position.y = -50;
                scene.add(plane);
            };

            function drawEdge3(vertex0, vertex1, type) {
                var color = (type ? 0x00aaff : 0xff0000);
                var line_geometry = new THREE.Geometry();
                line_geometry.vertices.push(new THREE.Vector3(vertex0[0], vertex0[1], vertex0[2]));
                line_geometry.vertices.push(new THREE.Vector3(vertex1[0], vertex1[1], vertex1[2]));

                var line = new THREE.Line(line_geometry, new THREE.LineBasicMaterial({ color: color, linewidth: 1 }));
                scene.add(line);
            };

            //            plane();


            var main_pic = "http://profile.ak.fbcdn.net/hprofile-ak-prn2/1117256_100000104723685_1282577297_q.jpg";
            var pic = "http://profile.ak.fbcdn.net/hprofile-ak-ash4/202838_100000138502847_1971065999_q.jpg";

            function drawNetwork(vertices) {

                var cube_hypotenuse = Math.ceil(Math.sqrt(2 * Math.pow(cube_len, 2)));
                var between_cubes = cube_hypotenuse;
                var circle_length = (vertices - 1) * cube_hypotenuse + (vertices - 2) * between_cubes;
                var radius = Math.ceil((0.5 * circle_length) / Math.PI);

                var cos_theta = (2 * Math.pow(radius, 2) - Math.pow(radius, 2)) / (2 * Math.pow(radius, 2));
                var theta = Math.floor(Math.acos(cos_theta) + Math.PI / 18);
                //                console.log("theta: ", theta);
                //                console.log("between cubes: ", between_cubes);
                //                console.log("cube len: ", cube_len);
                var initX = 40, initY = 20, initZ = 0;
                var pointX, pointY, pointZ, ptX, ptY, ptZ;

                drawCube(initX, initY, initZ, main_pic, "YOANA");
                //                console.log("radius: ", radius);

                var phi;
                var arr = ["name0", "name1", "name2", "name3"];
                for (var i = 0; i <= (vertices - 2); i++) {
                    //stranna forma

                    //                    phi = theta;
                    //                    theta = 90 - phi;

                    //                    pointX = initX + radius * Math.cos(theta * i) * Math.sin(phi * i);
                    //                    pointY = initY + radius * Math.sin(theta * i) * Math.sin(phi * i);
                    //                    pointZ = initZ + radius * Math.cos(phi * i);

                    //                    drawCube(pointX, pointY, pointZ, pic, "VERTEX" + i);
                    //                    drawEdge3([initX, initY, initZ], [pointX, pointY, pointZ]);

                    //kato dnk

                                        pointX = initX + radius * Math.cos(theta * i) * Math.sin(theta * i);
                                        pointY = initY + radius * Math.sin(theta * i) * Math.sin(theta * i);
                                        pointZ = initZ + radius * Math.cos(theta * i);

                                        drawCube(pointX, pointY, pointZ, pic, arr[i]);
                                        drawEdge3([initX, initY, initZ], [pointX, pointY, pointZ]);

                    //kato okryjnost
                    //                    for (var j = 1; j <= vertices/2 - 1; j++) {
                    //                        pointX = initX + radius * Math.cos(theta * j);
                    //                        pointY = initY + radius * Math.sin(theta * j * i);
                    //                        pointZ = initZ + radius * Math.sin(i * theta);
                    //                        console.log("pointZ : ", pointZ);

                    //                        drawCube(pointX, pointY, pointZ, pic, "VERTEX");
                    //                        drawEdge3([initX, initY, initZ], [pointX, pointY, pointZ], "type");

                    //                    }

                    //                    drawEdge3([objArray[1].position.x, objArray[1].position.y, objArray[1].position.z], [objArray[2].position.x, objArray[2].position.y, objArray[2].position.z]);
                    //                    drawEdge3([objArray[2].position.x, objArray[2].position.y, objArray[2].position.z], [objArray[3].position.x, objArray[3].position.y, objArray[3].position.z]);

//                    for (var j = 0; j < Math.ceil(vertices / 4); j++) {
//                        pointX = initX + radius * Math.cos(theta * i);
//                        pointY = initY + radius * Math.sin(theta * i);
//                        pointZ = initZ + radius * 1.5 * Math.tan(j * theta);

//                        drawCube(pointX, pointY, pointZ, pic, "VERTEX");
//                        drawEdge3([initX, initY, initZ], [pointX, pointY, pointZ], "type");
//                    }

//                    for (var j = vertices / 2; j > Math.floor(vertices / 4); j--) {
//                        pointX = initX + radius * Math.cos(theta * i);
//                        pointY = initY + radius * Math.sin(theta * i);
//                        pointZ = initZ + radius * 1.5 * Math.tan(j * theta);

//                        drawCube(pointX, pointY, pointZ, pic, "VERTEX");
//                        drawEdge3([initX, initY, initZ], [pointX, pointY, pointZ], "type");
//                    }

                }


            }

            drawNetwork(n);
            container.appendChild(renderer.domElement);

        };

    </script>
</head>
<body style="border: 0px solid red;">
    <div id="container" style="border: 0px solid black; width: 500px; height: 0px;
        z-index: 1;">
    </div>
</body>
</html>
